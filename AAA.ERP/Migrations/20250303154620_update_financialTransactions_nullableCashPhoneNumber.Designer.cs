// <auto-generated />
using System;
using Domain.Account.DBConfiguration.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AAA.ERP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250303154620_update_financialTransactions_nullableCashPhoneNumber")]
    partial class update_financialTransactions_nullableCashPhoneNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Account.Models.Entities.AccountGuide.AccountGuide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.ToTable("AccountGuides", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Attachments", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(14);

                    b.Property<Guid>("AccountGuidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountNature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActiveAccount")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsCreatedFromSubLeadger")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<bool>("IsDepreciable")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsPostedAccount")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsStopDealing")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsSubLeadgerBaseAccount")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(12);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(13);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(15);

                    b.Property<string>("SubLeadgerType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(11);

                    b.HasKey("Id");

                    b.HasIndex("AccountGuidId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("ChartOfAccounts", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.CollectionBooks.CollectionBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.ToTable("CollectionBooks", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Currencies.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<int>("CostCenterType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("CostCenters", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Currencies.CostCenterChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CostCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ChartOfAccountId", "CostCenterId")
                        .IsUnique();

                    b.ToTable("CostCenterChartOfAccounts", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(6);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Entries.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<Guid?>("BranchId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("CurrencyId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("EntryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<decimal>("ExchageRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<Guid>("FinancialPeriodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("FinancialPeriodId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(9);

                    b.Property<string>("ReceiverName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BranchId1");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("FinancialPeriodId");

                    b.HasIndex("FinancialPeriodId1");

                    b.ToTable("Entries", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Entries.EntryAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("EntryId");

                    b.ToTable("EntryAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Entries.FinancialTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("AccountNature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(4);

                    b.Property<string>("AtmReferenceNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(19);

                    b.Property<string>("CashAgentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(8);

                    b.Property<string>("CashPhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(9);

                    b.Property<Guid>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("ChequeBankId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10);

                    b.Property<DateTime?>("ChequeCollectionDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(13);

                    b.Property<string>("ChequeIssueDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(12);

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(11);

                    b.Property<Guid?>("CollectionBookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<Guid?>("ComplementTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditCardLastDigits")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(20);

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsPaymentTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(21);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(22);

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Cash")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("PromissoryCollectionDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(16);

                    b.Property<string>("PromissoryIdentityCard")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(17);

                    b.Property<string>("PromissoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(14);

                    b.Property<string>("PromissoryNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(15);

                    b.Property<string>("WireTransferReferenceNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(18);

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("ChequeBankId");

                    b.HasIndex("CollectionBookId");

                    b.HasIndex("EntryId");

                    b.ToTable("FinancialTransactions", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.FinancialPeriods.FinancialPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("PeriodTypeByMonth")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("YearNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("YearNumber")
                        .IsUnique();

                    b.ToTable("FinancialPeriods", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.GLSettings.GLSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("DecimalDigitsNumber")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(4);

                    b.Property<string>("DepreciationApplication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsAllowingDeleteVoucher")
                        .HasColumnType("bit")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsAllowingEditVoucher")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsAllowingNegativeBalances")
                        .HasColumnType("bit")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("MonthDays")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("GLSettings", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int>("Commission")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(8);

                    b.Property<string>("BankAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(9);

                    b.Property<Guid?>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(10);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<string>("Phone")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(6);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.CashInBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(6);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("CashInBoxes", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(9);

                    b.Property<string>("Mobile")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(11);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<string>("Phone")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(7);

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(10);

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.FixedAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("AccumlatedAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssetLifeSpanByYears")
                        .HasColumnType("int");

                    b.Property<Guid?>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepreciationRate")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExpensesAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FixedAssetType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDepreciable")
                        .HasColumnType("bit");

                    b.Property<string>("ManufactureCompany")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(9);

                    b.Property<string>("Model")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(10);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<string>("Serial")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(6);

                    b.Property<string>("Version")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("AccumlatedAccountId");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("ExpensesAccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("FixedAssets", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(9);

                    b.Property<string>("Mobile")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameSecondLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(11);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<string>("Phone")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(7);

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(10);

                    b.HasKey("Id");

                    b.HasIndex("ChartOfAccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameSecondLanguage")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shared.BaseEntities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.AccountGuide.AccountGuide", null)
                        .WithMany()
                        .HasForeignKey("AccountGuidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Currencies.CostCenter", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.Currencies.CostCenter", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Currencies.CostCenterChartOfAccount", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Models.Entities.Currencies.CostCenter", null)
                        .WithMany("ChartOfAccounts")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartOfAccount");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Entries.Entry", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId1");

                    b.HasOne("Domain.Account.Models.Entities.Currencies.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Domain.Account.Models.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("Domain.Account.Models.Entities.FinancialPeriods.FinancialPeriod", null)
                        .WithMany()
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Models.Entities.FinancialPeriods.FinancialPeriod", "FinancialPeriod")
                        .WithMany()
                        .HasForeignKey("FinancialPeriodId1");

                    b.Navigation("Branch");

                    b.Navigation("Currency");

                    b.Navigation("FinancialPeriod");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Entries.EntryAttachment", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.Attachments.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Models.Entities.Entries.Entry", null)
                        .WithMany("EntryAttachments")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Entries.FinancialTransaction", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.Bank", "ChequeBank")
                        .WithMany()
                        .HasForeignKey("ChequeBankId");

                    b.HasOne("Domain.Account.Models.Entities.CollectionBooks.CollectionBook", "CollectionBook")
                        .WithMany()
                        .HasForeignKey("CollectionBookId");

                    b.HasOne("Domain.Account.Models.Entities.Entries.Entry", "Entry")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartOfAccount");

                    b.Navigation("ChequeBank");

                    b.Navigation("CollectionBook");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Bank", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId");

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.Bank", null)
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ChartOfAccount");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Branch", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.Attachments.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId");

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.Branch", null)
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Attachment");

                    b.Navigation("ChartOfAccount");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.CashInBox", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId");

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.CashInBox", null)
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ChartOfAccount");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Customer", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId");

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.Customer", null)
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ChartOfAccount");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.FixedAsset", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "AccumlatedAccount")
                        .WithMany()
                        .HasForeignKey("AccumlatedAccountId");

                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId");

                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ExpensesAccount")
                        .WithMany()
                        .HasForeignKey("ExpensesAccountId");

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.FixedAsset", null)
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("AccumlatedAccount");

                    b.Navigation("ChartOfAccount");

                    b.Navigation("ExpensesAccount");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.SubLeadgers.Supplier", b =>
                {
                    b.HasOne("Domain.Account.Models.Entities.ChartOfAccounts.ChartOfAccount", "ChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountId");

                    b.HasOne("Domain.Account.Models.Entities.SubLeadgers.Supplier", null)
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ChartOfAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shared.BaseEntities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shared.BaseEntities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.BaseEntities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shared.BaseEntities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Currencies.CostCenter", b =>
                {
                    b.Navigation("ChartOfAccounts");
                });

            modelBuilder.Entity("Domain.Account.Models.Entities.Entries.Entry", b =>
                {
                    b.Navigation("EntryAttachments");

                    b.Navigation("FinancialTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
